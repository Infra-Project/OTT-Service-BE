apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: ott-app
    role: production
    tags.datadoghq.com/env: "prod"
    tags.datadoghq.com/service: "ott-app"
    tags.datadoghq.com/version: "1.0.0"
  name: production-deploy
spec:
  replicas: 3
  selector:
    matchLabels:
      role: production
  template:
    metadata:
      labels:
        role: production
        tags.datadoghq.com/env: "prod"
        tags.datadoghq.com/service: "ott-app"
        tags.datadoghq.com/version: "1.0.0"
    spec:
      affinity: 
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: role
                operator: In
                values:
                - production
      volumes:
        - name: keypair-myssh-pub
          configMap:
            name: myssh.pub  # kubectl create configmap myssh.pub --from-file=keypair/myssh.pub
        - name: ott-app
          secret:
            secretName: ott-app-config # kubectl create secret generic ott-app-config --from-file=.env
        - name: keypair-myssh
          secret:
            secretName: myssh # kubectl create secret generic myssh --from-file=keypair/myssh
      containers:
        - name: ott-app
          image: how0326/ott_service:modify
          volumeMounts:
            - name: ott-app
              mountPath: /app/.env
            - name: keypair-myssh
              mountPath: /app/keypair/myssh
            - name: keypair-myssh-pub
              mountPath: /app/keypair/myssh.pub
          env:
            - name: DD_AGENT_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: DD_ENV
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/env']
            - name: DD_VERSION
              valueFrom:
                fieldRef:
                  fieldPath: metadata.labels['tags.datadoghq.com/version']
            - name: DD_LOGS_INJECTION
              value: "true"
          ports:
            - containerPort: 8080
          livenessProbe:
            httpGet:
              path: /
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 1
            timeoutSeconds: 10
          readinessProbe:
            exec:
              command:
                - ls
                - /app/app.js
            initialDelaySeconds: 30
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 1
            timeoutSeconds: 10

